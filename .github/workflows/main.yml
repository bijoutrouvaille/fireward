name: Build, release and publish
on:
  push:
    branches:
      - master
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-haskell@v1.1.4
        name: Setup Haskell Stack
        with:
          ghc-version: 8.8.4
          stack-version: 2.3.1
      - uses: actions/cache@v2.1.3
        name: Cache ~/.stack
        with:
          path: ~/.stack
          key: ${{ runner.os }}-stack

      - name: Build
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          # stack build --system-ghc --test --bench --no-run-tests --no-run-benchmarks --only-dependencies
          version=$(git describe --tags `git rev-list --tags --max-count=1`)
          # stack build --system-ghc --test --bench --no-run-tests --no-run-benchmarks
          stack --no-terminal install --bench --no-run-benchmarks --no-run-tests
          # version=$(stack exec fireward -- -V)
          
          osname=$(echo "$RUNNER_OS" | awk '{print tolower($0)}' | sed 's/macos/osx/')
          if [ "$osname" = "windows" ]; then
            DEPLOY_FILE=$(stack path --local-bin)\\fireward.exe
            # cp "$(stack path --local-bin)\\fireward" "$DEPLOY_FILE" # don't copy anything; it's already there
          else
            DEPLOY_FILE=$(stack path --local-bin)/fireward-${osname}
            cp "$(stack path --local-bin)/fireward" "$DEPLOY_FILE" # don't clobber files from different os's
          fi
          gh release view $version || gh release create $version --title "$version" --notes "${{ github.event.head_commit.message }}" --draft
          gh release upload $version "${DEPLOY_FILE}#${RUNNER_OS}"

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: get-release
        run: |
          version=$(git describe --tags `git rev-list --tags --max-count=1`)
          # echo 'FIREWARD_VERSION='$version >> $GITHUB_ENV
          releaseid=$(gh release view $version | grep 'url:' | head -n 1 | sed -E 's/.*releases.tag.(.*)/\1/')
          echo '::set-output name=RELEASE_ID::'$releaseid
      - name: Publish release
        uses: StuYarrow/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          id: ${{ steps.get-release.outputs.RELEASE_ID }}

  publish:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '10'
      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
        run: |

          cd npm-bin

          v=$(git describe --tags `git rev-list --tags --max-count=1`)
          files=(fireward-linux fireward-osx fireward.exe)

          for f in ${files[*]}; do
            if [ -f "$f" ]; then 
              rm $f
            fi
          done

          for f in ${files[*]}; do
            echo "downloading $f"
            curl -L https://github.com/bijoutrouvaille/fireward/releases/download/$v/$f -o $f
            chmod 755 $f
          done

          cp ../readme.md ./readme.md

          npm version "$v" 

          if [ "$1" = "beta" ]; then
            npm publish --tag beta
          else 
            npm publish 
          fi

          npm publish 

          rm ./readme.md

